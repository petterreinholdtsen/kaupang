#!/usr/bin/python3

import configparser
import functools
import optparse
from os.path import expanduser

import tornado.ioloop

import sys
import os
sys.path.append(os.path.join(sys.path[0], '..'))

import valutakrambod

class BalanceFetcher(object):
    def __init__(self):
        configpath = expanduser('~/.config/valutakrambod/config.ini')
        config = configparser.ConfigParser()
        config.read(configpath)
        self.ioloop = tornado.ioloop.IOLoop.current()
        self.services = valutakrambod.service.knownServices()
        self.traders = []
        self.data = {}
        self.orders = {}
        self.showorders = False
        for e in self.services:
            service = e()
            service.confinit(config)
            if service.trading():
                self.ioloop.call_later(len(self.services),
                                       functools.partial(self.getbalance, service))
                self.traders.append(service)


    async def showbalance(self):
        sum = {}
        for service in sorted(self.data.keys()):
            print(service, self.data[service])
            if self.showorders:
                for marketpair in self.orders[service].keys():
                    o = await self.orders[service][marketpair]
                    print("  %s: %s" % (marketpair, o))
            for currency in self.data[service].keys():
                if currency not in sum:
                    sum[currency] = 0
                sum[currency] += self.data[service][currency]
        for currency in sorted(sum.keys()):
            print("Sum", currency, sum[currency])
        self.ioloop.stop()
                
            
    async def getbalance(self, service):
        t = service.trading()
        b = t.balance();
        name = service.servicename()
        if self.showorders:
            self.orders[name] = {}
            for marketpair in service.ratepairs():
                self.orders[name][marketpair] = t.orders(marketpair)
        b = await b
        d = {}
        for currency in ('BTC', 'EUR', 'USD'):
            if currency in b['balance'] and b['balance'][currency] > 0:
                d[currency] = b['balance'][currency]
        # the last one turn off the light
        self.data[name] = d
        if len(self.traders) == len(self.data.keys()):
            await self.showbalance()

    def run(self):
        try:
            self.ioloop.start()
        except KeyboardInterrupt:
            pass

def main():
    parser = optparse.OptionParser()
    parser.add_option('-o', action="store_true", dest='orders',
                      default=False, help='list open orders')
    opt, args = parser.parse_args()
    fetcher = BalanceFetcher()
    if opt.orders:
        fetcher.showorders = True
    fetcher.run()

if '__main__' == __name__:
    main()
