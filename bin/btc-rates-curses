#!/usr/bin/python3

import configparser
import curses
import functools
import optparse
import time

from curses import wrapper
from decimal import Decimal
from os.path import expanduser
from sortedcontainers.sorteddict import SortedDict
import tornado.ioloop

import valutakrambod

class CursesViewer(object):
    def __init__(self, currencies = None, opt = None, args = None):
        self.rates = SortedDict()
        self.lastrequest = {}
        self.errlog = []
        self.currencies = currencies
        self.streamcollectors = {}
        configpath = expanduser('~/.config/valutakrambod/config.ini')
        self.config = configparser.ConfigParser()
        self.config.read(configpath)
        self.notes = []
        self.opt = opt
        self.args = args
    def addnote(self, msg, lifetime=10):
        now = time.time()
        self.notes.append((msg, now+lifetime))
    def expirenotes(self):
        # Remove expired notes
        now = time.time()
        self.notes = list(filter(lambda x: x[1] > now, self.notes))
    def logerror(self, service, msg, lifetime=30):
        now = time.time()
        self.errlog.append((msg, now+lifetime, now))
        with open('error.log', 'a') as f:
            f.write("%s %s\n" % (datetime.datetime.utcfromtimestamp(now).isoformat(),
                                 msg))
    def expireerrors(self):
        now = time.time()
        self.errlog = list(filter(lambda x: x[1] > now, self.errlog))
    def data(self, service, pair, askprice, bidprice, stored, created, lastchange):
        self.rates[pair, (service.servicename())] = (service, askprice, bidprice, stored, created, lastchange)
        self.drawdata(service)
        self.considerNewPeriod(service, pair)

    def drawdata(self, updatedservice):
        self.stdscr.clear()
        maxy, maxx = self.stdscr.getmaxyx()
        line = 2
        now = time.time()
        s = "%15s %-6s %-11s %-11s %-5s  %4s %6s" % (
            "Name", "Pair", "Bid", "Ask", "Spr", "Ftcd", "Age",
            )
        self.stdscr.addstr( 1, 0, s)
        for entry in self.rates.keys():
            (service, askprice, bidprice, stored, created, lastchange) = self.rates[entry]
            pair = entry[0]
            if created is not None:
                age = now - created
            else:
                age = Decimal('nan')
            if askprice is not None and askprice != Decimal(0.0):
                spread = (1-bidprice/askprice)*100
            else:
                spread = float('nan')
            period = service.guessperiod(pair)
            if service == updatedservice:
                updated = "+"
            else:
                updated = " "
            s = "%15s%s%s%s %11.4f %11.4f %5.1f%% %4d %6.f %6.f" % (
                entry[1],
                updated,
                pair[0],
                pair[1],
                bidprice,
                askprice,
                spread,
                now - stored,
                age,
                period,
            )
            self.stdscr.addstr( line, 0, s)
            line = line + 1

        line = line + 1
        for note, expire in self.notes[-1::-1]:
            if line < maxy - 1:
                self.stdscr.addstr( line, 0, note)
                line = line + 1
        self.expirenotes()

        line = line + 1
        for errmsg, expire, when in self.errlog[-1::-1]:
            if line < maxy - 1:
                self.stdscr.addstr(line, 2, "%.1f %s" % (now - when, errmsg[0:maxx-1]))
                line = line + 1
        self.expireerrors()
        self.stdscr.refresh()

    def newdata(self, service, pair, changed):
        self.data(
            service,
            pair,
            service.rates[pair]['ask'],
            service.rates[pair]['bid'],
            service.rates[pair]['stored'],
            service.rates[pair]['when'],
            service.rates[pair]['lastchange'],
        )
    async def runRefresh(self, service):
        try:
            self.addnote("Updating %s" % service.servicename(), 10)
            await service.fetchRates(service.wantedpairs)
        except Exception as e:
            self.logerror(service, "%s fetch: %s" % (service.servicename(), str(e)))
            # FIXME flag service as having problems?
    def considerNewPeriod(self, service, pair):
        """Change update period for those doing periodic updates, if it far
from the current period and not too short.

        """
        if service.periodic is None:
            return
        period = service.guessperiod(pair)
        if period is not float('nan'):
            if period > 20 and \
               abs(service.periodic.callback_time/1000 - (period/2)) > 5:
              if False:
                self.logerror(service, "Change %s period from %.1f (%1.f) to %.1f" % (
                    service.servicename(),
                    service.periodic.callback_time/1000,
                    abs(service.periodic.callback_time/1000 - (period/2)),
                    period/2,
                ))
                service.periodicUpdate(period / 2)
    def run(self, stdscr):
        self.stdscr = stdscr
        self.stdscr.clear()
        self.ioloop = tornado.ioloop.IOLoop.current()
        self.services = []
        for e in valutakrambod.service.knownServices():
            service = e(self.currencies)
            service.confinit(self.config)
            self.services.append(service)
            service.subscribe(self.newdata)
            service.errsubscribe(self.logerror)
            sock = service.websocket()
            if sock:
                self.streamcollectors[service] = sock
                sock.connect()
            else:
                # For non-streaming services, schedule initial updates, one second apart
                self.ioloop.call_later(len(self.services),
                                       functools.partial(self.runRefresh, service))
                # And do regular updates too
                service.periodicUpdate(60)
            if sock:
                self.addnote("Enabling %s (websocket)" % service.servicename(), 5)
            else:
                self.addnote("Enabling %s" % service.servicename(), 5)

        # Make sure to update at least ever 5 seconds if nothing happen elsewhere.
        self.regular =  tornado.ioloop.PeriodicCallback(functools.partial(self.drawdata, None),
                                                        5 * 1000)
        self.regular.start()
        try:
            self.ioloop.start()
        except KeyboardInterrupt:
            pass
        for s, c in self.streamcollectors.items():
            c.close()

class dummyCurses(object):
    def clear(self):
        pass
    def getmaxyx(self):
        return (9999, 9999)
    def addstr(self, x, y, s):
        s = s.rstrip()
        if "" != s:
            print(s)
    def refresh(self):
        pass
def dummywrapper(f):
    return f(dummyCurses())    

def main():
    parser = optparse.OptionParser()
    parser.add_option('-c', action="store_true", dest='curses', default=False)
    opt, args = parser.parse_args()
    
    # The set of currencies we care about, only pairs in this set is
    # relevant.
    currencies = ['BTC', 'USD', 'EUR', 'NOK']
    c = CursesViewer(currencies, opt=opt, args=args)
    if opt.curses:
        wrapper(c.run)
    else:
        dummywrapper(c.run)

if __name__ == '__main__':
    main()
