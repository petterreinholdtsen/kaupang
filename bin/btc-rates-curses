#!/usr/bin/python3

import curses
import optparse
import time

from sortedcontainers.sorteddict import SortedDict
from tornado import ioloop

import BTCtrader

class CursesViewer(object):
    def __init__(self, currencies = None):
        self.rates = SortedDict()
        self.lastrequest = {}
        self.errlog = []
        self.currecies = currencies
    def logerror(self, msg):
        self.errlog.append(msg)
    def data(self, servicename, pair, askprice, bidprice, stored, created):
        self.rates[(servicename, pair)] = (askprice, bidprice, stored, created)
        self.drawdata()
    def drawdata(self):
        line = 2
        now = time.time()
        for entry in self.rates.keys():
            (askprice, bidprice, stored, created) = self.rates[entry]
            if created is not None:
                age = now - created
            else:
                age = -1
            s = "%15s %s%s %11.4f %11.4f %5.1f %4d %5d" % (
                entry[0],
                entry[1][0],
                entry[1][1],
                askprice,
                bidprice,
                (1-bidprice/askprice)*100,
                now - self.rates[entry][2],
                age
            )
            if self.c:
                self.win.addstr( line, 0, s)
                line = line + 1
            else:
                print(s)
        line = 0
        for error in self.errlog[0:10]:
            self.win.addstr( line, 60, error[0:15])
        if self.c:
            self.win.refresh()
        self.considerRefresh()

    def newdata(self, data, service, pair):
        self.data(
            service.servicename(), pair,
            service.rates[pair]['ask'],
            service.rates[pair]['bid'],
            service.rates[pair]['stored'],
            service.rates[pair]['when'],
        )
    def runRefresh(self, service):
        try:
            msg = "Updating %s" % service.servicename()
            if self.c:
                self.win.addstr( 0, 0, msg)
                self.win.refresh()
            else:
                print(msg)
            service.fetchRates(service.rates.keys())
            if self.c:
                self.win.addstr( 0, 0, ' ' * len(msg))
                self.win.refresh()
        except Exception as e:
            self.logerror(str(e))
            # FIXME flag service as having problems?
    def considerRefresh(self):
        # refresh left behind numbers at least every 60 seconds
        refreshtime = 60
        mindelay = 30
        now = time.time()
        for service in self.services:
            update = False
            if service in self.lastrequest:
                lastupdatereq = self.lastrequest[service]
            else:
                lastupdatereq = 0
            for pair in service.rates.keys():
                if service.rates[pair]['when'] is not None:
                    refreshtime = (now - service.rates[pair]['when']) / 2
                else:
                    refreshtime = 60
                if refreshtime > 15*60: # max 15 minutes between each refresh
                    refreshtime = 15*60
                if service.rates[pair]['stored'] + mindelay < now:
                    update = True
            if update and lastupdatereq + refreshtime < now:
                #print("request callback for %s" % service.servicename())
                self.ioloop.spawn_callback(self.runRefresh, service)
                self.lastrequest[service] = now
                break

    def run(self):
        parser = optparse.OptionParser()
        parser.add_option('-c', action="store_true", dest='curses', default=False)
        opt, args = parser.parse_args()
        self.c = opt.curses
        if self.c:
            stdscr = curses.initscr()
            curses.noecho()
            curses.cbreak()
            stdscr.keypad(1)

            begin_x = 1; begin_y = 1
            height = 30; width = 75
            self.win = curses.newwin(height, width, begin_y, begin_x)

        self.ioloop = ioloop.IOLoop.instance()
        collectors = []
        self.services = []
        for e in BTCtrader.service.knownServices():
            s = e()
            self.services.append(s)
            s.subscribe(self.newdata, self)
            sname = s.servicename()
            self.runRefresh(s)
            rates = s.currentRates()
            sock = s.websocket()
            if sock:
                collectors.append(sock)
            for p in rates.keys():
                self.data(sname,
                          p,
                          rates[p]['ask'],
                          rates[p]['bid'],
                          rates[p]['stored'],
                          rates[p]['when'],
                )

        for c in collectors:
            c.connect()

        try:
            self.ioloop.start()
        except KeyboardInterrupt:
            pass
        for c in collectors:
            c.close()

        if self.c:
            curses.nocbreak(); stdscr.keypad(0); curses.echo()
            curses.endwin()

def main():
    # The set of currencies we care about, only pairs in this set is
    # relevant.
    currencies = ['BTC', 'USD', 'EUR', 'NOK']
    c = CursesViewer(currencies)
    c.run()

if __name__ == '__main__':
    main()
